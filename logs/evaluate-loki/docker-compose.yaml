---
version: "3"

networks:
  loki:

services:
  read:
    image: grafana/loki:3.0.0
    command: "-config.file=/etc/loki/config.yaml -target=read"
    ports:
      - 3101:3100
      - 7946
      - 9095
    volumes:
      - ./loki-config.yaml:/etc/loki/config.yaml
    depends_on:
      - minio
    healthcheck:
      test: [ "CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:3100/ready || exit 1" ]
      interval: 10s
      timeout: 5s
      retries: 5
    networks: &loki-dns
      loki:
        aliases:
          - loki

  write:
    image: grafana/loki:3.0.0
    command: "-config.file=/etc/loki/config.yaml -target=write"
    ports:
      - 3102:3100
      - 7946
      - 9095
    volumes:
      - ./loki-config.yaml:/etc/loki/config.yaml
    healthcheck:
      test: [ "CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:3100/ready || exit 1" ]
      interval: 10s
      timeout: 5s
      retries: 5
    environment:
      - LOKI_SKIP_AUTH=true
    depends_on:
      - minio
    networks:
      <<: *loki-dns

#  alloy:
#    image: grafana/alloy-dev:latest
#    volumes:
#      - ./alloy-local-config.yaml:/etc/alloy/config.alloy:ro
#      - /var/run/docker.sock:/var/run/docker.sock
#    command:  run --server.http.listen-addr=0.0.0.0:12345 --storage.path=/var/lib/alloy/data /etc/alloy/config.alloy
#    ports:
#      - 12345:12345
#    depends_on:
#      - gateway
#    networks:
#      - loki

  minio:
    image: minio/minio
    entrypoint:
      - sh
      - -euc
      - |
        mkdir -p /data/loki-data && \
        mkdir -p /data/loki-ruler && \
        minio server /data
    environment:
      - MINIO_ROOT_USER=loki
      - MINIO_ROOT_PASSWORD=supersecret
      - MINIO_PROMETHEUS_AUTH_TYPE=public
      - MINIO_UPDATE=off
    ports:
      - 9000
    volumes:
      - ./.data/minio:/data
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:9000/minio/health/live" ]
      interval: 15s
      timeout: 20s
      retries: 5
    networks:
      - loki

  grafana:
    image: grafana/grafana:latest
    environment:
      - GF_PATHS_PROVISIONING=/etc/grafana/provisioning
    depends_on:
      - gateway
    entrypoint:
      - sh
      - -euc
      - |
        mkdir -p /etc/grafana/provisioning/datasources
        cat <<EOF > /etc/grafana/provisioning/datasources/ds.yaml
        apiVersion: 1
        datasources:
          - name: Loki
            type: loki
            access: proxy
            url: http://gateway:3100
          - name: Tempo
            type: tempo
            access: proxy
            url: http://tempo:3200
          - name: Prometheus
            type: prometheus
            access: proxy
            url: http://prometheus:9090
        EOF
        /run.sh
    ports:
      - "3000:3000"
    healthcheck:
      test: [ "CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:3000/api/health || exit 1" ]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - loki

  backend:
    image: grafana/loki:3.0.0
    volumes:
      - ./loki-config.yaml:/etc/loki/config.yaml
    ports:
      - "3100"
      - "7946"
    command: "-config.file=/etc/loki/config.yaml -target=backend -legacy-read-mode=false"
    depends_on:
      - gateway
    networks:
      - loki
    

  gateway:
    image: nginx:latest
    depends_on:
      - read
      - write
    entrypoint:
      - sh
      - -euc
      - |
        cat <<EOF > /etc/nginx/nginx.conf
        user  nginx;
        worker_processes  5;  ## Default: 1

        events {
          worker_connections   1000;
        }

        http {
          resolver 127.0.0.11;

          server {
            listen             3100;

            location = / {
              return 200 'OK';
              auth_basic off;
            }

            location = /api/prom/push {
              proxy_pass       http://write:3100\$$request_uri;
            }

            location = /api/prom/tail {
              proxy_pass       http://read:3100\$$request_uri;
              proxy_set_header Upgrade \$$http_upgrade;
              proxy_set_header Connection "upgrade";
            }

            location ~ /api/prom/.* {
              proxy_pass       http://read:3100\$$request_uri;
            }

            location = /loki/api/v1/push {
              proxy_pass       http://write:3100\$$request_uri;
            }

            location = /loki/api/v1/tail {
              proxy_pass       http://read:3100\$$request_uri;
              proxy_set_header Upgrade \$$http_upgrade;
              proxy_set_header Connection "upgrade";
            }

            location ~ /loki/api/.* {
              proxy_pass       http://read:3100\$$request_uri;
            }
          }
        }
        EOF
        /docker-entrypoint.sh nginx -g "daemon off;"
    ports:
      - "3100:3100"
    healthcheck:
      test: ["CMD", "service", "nginx", "status"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - loki

#  flog:
#    image: mingrammer/flog
#    command: -f json -d 200ms -l
#    networks:
#      - loki

  promtail:
    image: grafana/promtail:3.0.0
    volumes:
      - ../temp:/var/log
      - ./:/etc/promtail
    command: "-config.file=/etc/promtail/pormtail-config.yaml"
    networks:
      - loki
    depends_on:
      - gateway

  tempo:
    image: grafana/tempo:latest
    command: [ "-config.file=/etc/tempo.yaml" ]
    ports:
#      - "14268:14268"    # Jaeger ingest
      - "3200:3200"      # Tempo
      - "9095:9095"      # Tempo gRPC
      - "4317:4317"      # OTLP gRPC
      - "4318:4318"      # OTLP HTTP
#      - "9411:9411"      # Zipkin
    depends_on:
      - gateway
    user: root
    networks:
      - loki
#    healthcheck:
#      test: [ "CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:4317/ready || exit 1" ]
#      interval: 10s
#      timeout: 5s
#      retries: 5
    environment:
      - TEMPO_STORAGE_COMPACT_STRATEGY=blocks
      - TEMPO_STORAGE_COMPACT_RETENTION=12h
      - TEMPO_STORAGE_COMPACT_BLOCK_SIZE=15m
      - TEMPO_STORAGE_COMPACT_COMPRESSION_LEVEL=9
      - TEMPO_RECEIVER_OTLP_PROTOCOL_PORT=4318
      - TEMPO_RECEIVER_OTLP_PROTOCOL_HOST=0.0.0.0
      - TEMPO_STORAGE_LOCAL_DIRECTORY=/var/tempo
    volumes:
      - ./tempo.yaml:/etc/tempo.yaml
      - ./tempo-data:/var/tempo

  prometheus:
    image: prom/prometheus:v2.30.0
    ports:
      - "9090:9090"
    volumes:
      - ./:/etc/prometheus
      - ./prometheus-data:/prometheus
    command:
      - "--config.file=/etc/prometheus/prometheus.yaml"
      - "--storage.tsdb.path=/prometheus"
      - "--web.enable-lifecycle"
    depends_on:
      - gateway
    networks:
      - loki
    user: root


  node-exporter:
    image: prom/node-exporter:v1.2.2
    ports:
      - "9100:9100"
    networks:
      - loki
    environment:
      - NODE_ID={{.Node.ID}}
    volumes:
      - ./node/proc:/host/proc:ro
      - ./node/sys:/host/sys:ro
      - ./node:/rootfs:ro
    command:
      - "--path.procfs=/host/proc"
      - "--path.sysfs=/host/sys"
      - "--collector.filesystem.ignored-mount-points"
      - "^/(sys|proc|dev|host|etc)($|/)"
    restart: unless-stopped
